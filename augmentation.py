import argparse
import os
import sys
import cv2
import albumentations as A
import matplotlib.pyplot as plt
import numpy as np
from utils import close_on_key, get_image_files

from collections import defaultdict
import random


def plot_image_augmentation(augmented_images: list) -> None:
    """
    Plot the original image and 6 augmented images
    :param augmented_images: the augmented images created
    :return:
    """
    fig = plt.figure(figsize=(10, 7))
    fig.canvas.mpl_connect('key_press_event', close_on_key)

    for i, (name, img) in enumerate(augmented_images):
        plt.subplot(2, 4, i + 1)
        plt.imshow(img)
        plt.title(name)
        plt.axis('off')

    plt.tight_layout()
    plt.suptitle("Data Augmentation For Image", fontsize=18)
    plt.show()


def augment_image(image: np.ndarray, augmentations: list, path: str) -> list:
    """
    Apply 6 types of augmentation on image and save them in directory
    :param image: the image to be augmented
    :param augmentations: the chosen 6 type of augmentations
    :return: a list of the augmented images
    """
    # Retrieve directory location of image and filename
    base_dir = os.path.dirname(path)
    base_name = os.path.splitext(os.path.basename(path))[0]

    augmented_images = [("Original", image)]

    for name, transform in augmentations:
        augmented_image = transform(image=image)['image']
        augmented_images.append((name, augmented_image))

        # Save new augmented image in directory
        new_filename = f"{base_name}_{name}.JPG"
        save_path = os.path.join(base_dir, new_filename)

        cv2.imwrite(
            save_path,
            cv2.cvtColor(augmented_image, cv2.COLOR_RGB2BGR)
        )
        print(f"Saving {new_filename} in directory {base_dir}.")

    return augmented_images


def image_augmentation(img_path: str) -> list:
    """
    Load image and apply augmentations
    :param img_path: path of the image to be augmented
    :return: the images generated by the augmentations
    """
    # Load the image (OpenCV loads in BGR, convert to RGB)
    image = cv2.imread(img_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    augmentations = [
        ("Rotation", A.Rotate(limit=90, border_mode=0, p=1.0)),
        ("Strong Blur", A.Blur(blur_limit=(5, 9), p=1.0)),
        ("High Contrast", A.CLAHE(
            clip_limit=8.0,
            tile_grid_size=(4, 4),
            p=1.0
        )),
        ("Crop", A.RandomCrop(
            height=int(image.shape[0] * 0.7),
            width=int(image.shape[1] * 0.7),
            p=1.0
        )),
        ("Brightness", A.ColorJitter(
            brightness=(1.5, 2.0),
            contrast=0,
            saturation=0,
            hue=0,
            p=1.0
        )),
        ("Shear", A.Affine(shear={"x": 40, "y": 0}, p=1.0)),
    ]

    augmented_images = augment_image(image, augmentations, img_path)
    return augmented_images


def argparse_flags() -> argparse.Namespace:
    """
    Parse command line arguments
    :return: args passed in command line
    """
    parser = argparse.ArgumentParser(
        description="Display 6 types of data augmentation for images"
    )

    parser.add_argument(
        "paths",
        nargs='+',
        type=str,
        help="One or more images or folders containing images"
    )

    parsed_args = parser.parse_args()
    return parsed_args


if __name__ == "__main__":
    try:
        args = argparse_flags()
        images_path = get_image_files(args.paths)

        if not images_path:
            print("Error: No images found in passed parameters.")
            sys.exit(1)

        if len(images_path) == 1:
            # Display augmentations if only one image is processed
            augmented_images = image_augmentation(images_path[0])
            plot_image_augmentation(augmented_images)
        else:
            folder_to_images = defaultdict(list)
            for path in images_path:
                folder_to_images[os.path.dirname(path)].append(path)

            # Select minimum count of images to balance dataset
            values = folder_to_images.values()
            min_count = min(len(dataset_images) for dataset_images in values)

            # Augment each class
            for folder, dataset_images in folder_to_images.items():
                if len(dataset_images) > min_count:
                    selected = random.sample(dataset_images, min_count)
                else:
                    selected = dataset_images

                for img_path in selected:
                    image_augmentation(img_path)

    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)
